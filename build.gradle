plugins {
	id 'java'
	id 'org.springframework.boot' version '3.5.5'
	id 'io.spring.dependency-management' version '1.1.7'
	id 'org.liquibase.gradle' version '2.2.0'
}

group = 'com.liquibase'
version = '0.0.1-SNAPSHOT'
description = 'Demo project for Spring Boot'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(17)
	}
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.liquibase:liquibase-core'
	compileOnly 'org.projectlombok:lombok'
	runtimeOnly 'com.microsoft.sqlserver:mssql-jdbc'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

	implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.2.0'
	// https://mvnrepository.com/artifact/io.springfox/springfox-swagger2
	implementation "io.springfox:springfox-swagger2:2.9.2"


	// The Liquibase Gradle plugin requires a `liquibaseRuntime` configuration with
	// Liquibase and the JDBC driver available at runtime. Add them here.
	liquibaseRuntime 'org.liquibase:liquibase-core'
	liquibaseRuntime 'com.microsoft.sqlserver:mssql-jdbc'
	// The Liquibase CLI uses picocli; include it on the liquibaseRuntime classpath to avoid NoClassDefFoundError
	liquibaseRuntime 'info.picocli:picocli:4.7.0'
}

// Add Liquibase plugin configuration so Gradle tasks (update/rollback) are available.
liquibase {
    activities {
        // Register the activity lazily to avoid the deprecated `create` call and unnecessary configuration
        register('liquibaseMain') {
            // Keep this in sync with your application.yml change-log path
            // Use the newer property name recommended by the plugin
            changelogFile 'src/main/resources/db/changelog/changelog-master.yml'

            // Use project properties if provided, otherwise fall back to the values in application.yml
            url project.hasProperty('dbUrl') ? project.property('dbUrl') : 'jdbc:sqlserver://localhost:1433;databaseName=liquibase;encrypt=true;trustServerCertificate=true'
            username project.hasProperty('dbUser') ? project.property('dbUser') : 'user'
            password project.hasProperty('dbPassword') ? project.property('dbPassword') : 'yesh@6289'
            driver 'com.microsoft.sqlserver.jdbc.SQLServerDriver'
        }
    }
    runList 'liquibaseMain'
}

tasks.named('test') {
	useJUnitPlatform()
}